#!/bin/bash
clang_path="${HOME}/cbl/bin/clang"
gcc_path="${HOME}/cbl/bin/aarch64-linux-gnu-"
gcc_32_path="${HOME}/cbl/bin/arm-linux-gnueabi-"

source=`pwd`
START=$(date +"%s")

date="`date +"%m%d-%H%M"`"

args="-j$(nproc --all) O=out \
	ARCH=arm64 "

print (){
case ${2} in
	"red")
	echo -e "\033[31m $1 \033[0m";;

	"blue")
	echo -e "\033[34m $1 \033[0m";;

	"yellow")
	echo -e "\033[33m $1 \033[0m";;

	"purple")
	echo -e "\033[35m $1 \033[0m";;

	"sky")
	echo -e "\033[36m $1 \033[0m";;

	"green")
	echo -e "\033[32m $1 \033[0m";;

	*)
	echo $1
	;;
	esac
}

args+="CC=$clang_path \
	CLANG_TRIPLE=aarch64-linux-gnu- \
	CROSS_COMPILE=$gcc_path \
	AR=${HOME}/cbl/bin/llvm-ar \
	NM=${HOME}/cbl/bin/llvm-nm \
	OBJCOPY=${HOME}/cbl/bin/llvm-objcopy \
	OBJDUMP=${HOME}/cbl/bin/llvm-objdump \
	STRIP=${HOME}/cbl/bin/llvm-strip \
	CROSS_COMPILE_ARM32=$gcc_32_path "

clean(){
	make mrproper
	make $args mrproper
}

export KBUILD_BUILD_USER="lavender"
export KBUILD_BUILD_HOST="Ratoriku"

build_oldcam(){
	print "Building OLDCAM..." blue
	make $args lavender-perf_defconfig && make $args
	if [ $? -ne 0 ]; then
    print "Error while building for oldcam!" red
    fi
    export zipname="Barairo-Kernel-OLDCAM-$date.zip"
	mkzip
}

build_newcam(){
	print "Building NEWCAM..." blue
	git apply patch/newcam
	make $args lavender-perf_defconfig && make $args
	if [ $? -ne 0 ]; then
    print "Error while building newcam!" red
    fi
    git reset --hard
    export zipname="Barairo-Kernel-NEWCAM-$date.zip"
	mkzip
}

build_oldcam_uv(){
	print "Building OLDCAM UV..." blue
	git apply patch/uv
	make $args lavender-perf_defconfig && make $args
	if [ $? -ne 0 ]; then
    print "Error while building oldcam uv!" red
    fi
    git reset --hard
    export zipname="Barairo-Kernel-OLDCAM-UV-$date.zip"
	mkzip
}

build_newcam_uv(){
	print "Building OLDCAM UV..." blue
	git apply patch/newcam && git apply patch/uv
	make $args lavender-perf_defconfig && make $args
	if [ $? -ne 0 ]; then
    print "Error while building oldcam uv!" red
    fi
    git reset --hard
    export zipname="Barairo-Kernel-NEWCAM-UV-$date.zip"
	mkzip
}

mkzip(){
	cp -f out/arch/arm64/boot/Image.gz-dtb ~/AnyKernel3
	cd ~/AnyKernel3
	make
	mv -f *.zip ~/$zipname
	cd ${HOME}
	cd $source
	print "All done.Find it at ${HOME}/$zipname" green
}

sftp_upload(){
cd ${HOME}
lftp <<EOF
    set sftp:auto-confirm yes
    open sftp://${sftp_server}
    user ${sftp_username} ${sftp_pwd}
    cd /home/frs/project/lc-dev/lavender/Barairo-Kernel
    mkdir ${date}
    cd ${date}
    mput *.zip
    bye
EOF
 
    echo "Sftp uploading done!"
}
	clean
	build_oldcam

	clean
	build_newcam
	
	clean
	build_oldcam_uv
	
	clean
	build_newcam_uv
	
	sftp_upload